@page "/items/cosmetic"
@using DotaDb.Data
@using DotaDb.Models
@using DotaDb.Utilities
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@inject ItemService ItemService
@inject AppStateService AppStateService
@inject NavigationManager NavigationManager

<div class="container py-2">
    <div class="row mb-2">
        <div class="col-md-3">
            <input id="search" class="form-control form-control-sm" type="text" placeholder="Search (press Enter)"
                   @bind="searchValue"
                   @bind:event="oninput"
                   @onkeyup="OnSearch" />
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnPrefabChanged">
                <option selected value=" ">-- Type --</option>
                @foreach (var prefab in viewModel.Prefabs)
                {
                    <option value="@prefab.Name">@prefab.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnRarityChanged">
                <option selected value=" ">-- Rarity --</option>
                @foreach (var rarity in viewModel.Rarities)
                {
                    <option value="@rarity.Name">@rarity.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnQualityChanged">
                <option selected value=" ">-- Quality --</option>
                @foreach (var quality in viewModel.Qualities)
                {
                    <option value="@quality.Name">@quality.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnUsedByChanged">
                <option selected value=" ">-- Used By --</option>
                @foreach (var hero in viewModel.Heroes)
                {
                    <option value="@hero">@hero</option>
                }
            </select>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-hover cosmetic-item-table" data-toggle="table">
            <thead>
                <tr>
                    <th></th>
                    <th class="text-left">Name</th>
                    <th>ID</th>
                    <th>Used By</th>
                    <th>Rarity</th>
                    <th>Quality</th>
                    <th>Slot</th>
                    <th>Created</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in viewModel.Items)
                {
                    <tr>
                        <td>
                            <div class="text-center py-1">
                                <img style="max-width: 128px" src="@item.IconPath" onerror="this.onerror=null;this.src='/images/missing_cosmetic_item.png';" />
                            </div>
                        </td>
                        <td class="text-left">
                            @(!string.IsNullOrWhiteSpace(item.Name) ? item.Name : "???")
                            <br />
                            <small class="text-muted text-capitalize">
                                @item.Prefab
                            </small>
                        </td>
                        <td>@item.DefIndex</td>
                        <td>
                            @if (item.UsedBy != null && item.UsedBy.Count > 0)
                            {
                                foreach (var hero in item.UsedBy)
                                {
                                    <img src="@hero.MinimapIconPath" width="24" height="24" />
                                    <a href="/hero/@hero.HeroId">
                                        @hero.HeroName
                                    </a>
                                }
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                        <td class="text-capitalize">
                            @if (!string.IsNullOrWhiteSpace(item.Rarity))
                            {
                                if (!string.IsNullOrWhiteSpace(item.RarityColor))
                                {
                                    <span style="color: @item.RarityColor">
                                        @item.Rarity
                                    </span>
                                }
                                else
                                {
                                    @item.Rarity
                                }
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                        <td class="text-capitalize">
                            @if (!string.IsNullOrWhiteSpace(item.QualityColor))
                            {
                                if (!string.IsNullOrEmpty(item.QualityColor))
                                {
                                    <span style="color: @item.QualityColor">
                                        @item.Quality
                                    </span>
                                }
                                else
                                {
                                    @item.Quality
                                }
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                        <td class="text-capitalize">
                            @if (!string.IsNullOrWhiteSpace(item.Slot))
                            {
                                @item.Slot
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                        <td>
                            @if (item.CreationDate.HasValue)
                            {
                                @item.CreationDate.Value.ToShortDateString()
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                        <td>
                            @if (item.Price.HasValue)
                            {
                                @item.Price
                            }
                            else
                            {
                                <i class="fas fa-minus text-warning" />
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <hr />
        <nav>
            <ul class="pagination">
                @if (currentPage > 1)
                {
                    <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage - 1))">Previous</button></li>
                }
                @if (currentPage > 2)
                {
                    <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage - 2))">@(currentPage - 2)</button></li>
                }
                @if (currentPage > 1)
                {
                    <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage - 1))">@(currentPage - 1)</button></li>
                }
                @if (pageCount > 1)
                {
                    <li class="page-item active"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage))">@currentPage</button></li>
                    @if (currentPage < pageCount)
                    {
                        <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage + 1))">@(currentPage + 1)</button></li>
                    }
                    @if (currentPage < pageCount - 1)
                    {
                        <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage + 2))">@(currentPage + 2)</button></li>
                    }
                    @if (currentPage < pageCount)
                    {
                        <li class="page-item"><button class="page-link" @onclick="@(e => UpdatePage(e, currentPage + 1))">Next</button></li>
                    }
                }
            </ul>
        </nav>
    </div>
</div>
@code {
    private const int itemsPerPage = 25;

    private int currentPage = 1;
    private int pageCount;

    private InStoreViewModel viewModel = new InStoreViewModel();
    private IEnumerable<InStoreItemViewModel> fullItems = new List<InStoreItemViewModel>();

    private string searchValue;
    private string selectedPrefab;
    private string selectedRarity;
    private string selectedQuality;
    private string selectedUsedBy;

    private void OnSearch(KeyboardEventArgs e)
    {
        // Apply filters if the user has either cleared out search or pressed "Enter"
        if (string.IsNullOrWhiteSpace(searchValue) || e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void OnUsedByChanged(ChangeEventArgs e)
    {
        selectedUsedBy = e.Value.ToString();
        ApplyFilters();
    }

    private void OnPrefabChanged(ChangeEventArgs e)
    {
        selectedPrefab = e.Value.ToString();
        ApplyFilters();
    }

    private void OnRarityChanged(ChangeEventArgs e)
    {
        selectedRarity = e.Value.ToString();
        ApplyFilters();
    }

    private void OnQualityChanged(ChangeEventArgs e)
    {
        selectedQuality = e.Value.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        viewModel.Items = new List<InStoreItemViewModel>();

        var groupA = FilterPrefab();
        var groupB = FilterQuality();
        var groupC = FilterRarity();
        var groupD = FilterUsedBy();

        var resultA = groupA.Intersect(groupB, new InStoreItemViewModelEqualityComparer());
        var resultB = resultA.Intersect(groupC, new InStoreItemViewModelEqualityComparer());
        var result = resultB.Intersect(groupD, new InStoreItemViewModelEqualityComparer());

        currentPage = 1;
        pageCount = result.Count() / itemsPerPage;
        viewModel.Items = result
            .Where(x => !string.IsNullOrWhiteSpace(searchValue) ? x.Name.ToLower().Contains(searchValue.Trim().ToLower()) : true)
            .OrderBy(x => x.Name)
            .Skip(itemsPerPage * (currentPage - 1))
            .Take(itemsPerPage)
            .ToList();
    }

    private IEnumerable<InStoreItemViewModel> FilterUsedBy()
    {
        if (string.IsNullOrWhiteSpace(selectedUsedBy))
        {
            return fullItems;
        }

        return fullItems
            .Where(x => x.UsedBy != null
                && x.UsedBy.Any(y => y.HeroName.ToLower() == selectedUsedBy.ToLower())
            );
    }

    private IEnumerable<InStoreItemViewModel> FilterPrefab()
    {
        if (string.IsNullOrWhiteSpace(selectedPrefab))
        {
            return fullItems;
        }

        return fullItems.Where(x => !string.IsNullOrWhiteSpace(x.Prefab)
            && x.Prefab.ToLower() == selectedPrefab.ToLower());
    }

    private IEnumerable<InStoreItemViewModel> FilterQuality()
    {
        if (string.IsNullOrWhiteSpace(selectedQuality))
        {
            return fullItems;
        }

        return fullItems.Where(x => !string.IsNullOrWhiteSpace(x.Quality)
            && x.Quality.ToLower() == selectedQuality.ToLower());
    }

    private IEnumerable<InStoreItemViewModel> FilterRarity()
    {
        if (string.IsNullOrWhiteSpace(selectedRarity))
        {
            return fullItems;
        }

        return fullItems.Where(x => !string.IsNullOrWhiteSpace(x.Rarity)
            && x.Rarity.ToLower() == selectedRarity.ToLower());
    }

    // We have to use an onclick event here because NavLink or "a" links don't trigger a component refresh when only the query param changes
    private void UpdatePage(MouseEventArgs e, int page)
    {
        NavigationManager.NavigateTo($"/items/cosmetic?page={page}", true);
    }

    protected override async Task OnInitializedAsync()
    {
        AppStateService.HeaderImageName = "bg6_fade.jpg";
        AppStateService.HeaderText = "Cosmetic & Store Items";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Query params have to be parsed out and can't be used easily like route parametrs in the @page declaration of the component
            var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(currentUri.Query).TryGetValue("page", out StringValues page))
            {
                currentPage = int.Parse(page);
                if (currentPage < 1)
                {
                    currentPage = 1;
                }
            }

            viewModel = await ItemService.GetCosmeticItemsAsync(null);
            fullItems = viewModel.Items;
            pageCount = viewModel.Items.Count() / itemsPerPage;
            viewModel.Items = viewModel.Items
                .Skip(itemsPerPage * (currentPage - 1))
                .Take(itemsPerPage);
            StateHasChanged();
        }
    }
}
