@page "/hero"
@page "/hero/{tab}"
@using DotaDb.Models
@using DotaDb.Data
@using Steam.Models.DOTA2
@using AutoMapper
@inject HeroService HeroService
@inject IMapper Mapper

<div class="container py-2">
    <ul class="nav nav-pills">
        <li class="nav-item">
            <NavLink class="nav-link" href="/hero/grid">
                <i class="fas fa-th"></i> Grid
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="/hero/table">
                <i class="fas fa-table"></i> Table
            </NavLink>
        </li>
    </ul>
    @if (Tab == "grid")
    {
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_str.png" width="28" height="28" />
                Strength
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.StrengthHeroes.Count; i++)
                    {
                        var hero = viewModel.StrengthHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_agi.png" width="28" height="28" />
                Agility
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.AgilityHeroes.Count; i++)
                    {
                        var hero = viewModel.AgilityHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_int.png" width="28" height="28" />
                Intelligence
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.IntelligenceHeroes.Count; i++)
                    {
                        var hero = viewModel.IntelligenceHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
    }
    else if (Tab == "table")
    {
        <div class="table-responsive">
            <table class="table table-striped hero-table" data-toggle="table">
                <thead>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th class="d-none d-lg-table-cell" colspan="3">Attack</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th></th>
                        <th data-sortable="true">HP / MP</th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_attack.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_defense.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_str.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_agi.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_int.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_speed.png" width="24" height="24" />
                        </th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Range</th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Rate</th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Type</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var hero in viewModel.StrengthHeroes)
                    {
                        <HeroTableRow Hero="hero" />
                    }
                    @foreach (var hero in viewModel.AgilityHeroes)
                    {
                        <HeroTableRow Hero="hero" />
                    }
                    @foreach (var hero in viewModel.IntelligenceHeroes)
                    {
                        <HeroTableRow Hero="hero" />
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private HeroSelectViewModel viewModel = new HeroSelectViewModel();

    [Parameter]
    public string Tab { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var heroes = await HeroService.GetHeroDetailsAsync();

            var str = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.STRENGTH.Key);
            var agi = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.AGILITY.Key);
            var intel = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.INTELLECT.Key);

            viewModel.StrengthHeroes = TranslateToViewModel(str);
            viewModel.AgilityHeroes = TranslateToViewModel(agi);
            viewModel.IntelligenceHeroes = TranslateToViewModel(intel);

            StateHasChanged();

            // Default view to grid if URL doesn't indicate it
            if (string.IsNullOrWhiteSpace(Tab) || (Tab != "grid" && Tab != "table"))
            {
                Tab = "grid";
            }

            StateHasChanged();
        }
    }

    private IReadOnlyCollection<HeroViewModel> TranslateToViewModel(IEnumerable<KeyValuePair<uint, HeroDetailModel>> heroes)
    {
        List<HeroViewModel> heroViewModels = new List<HeroViewModel>();

        foreach (var hero in heroes)
        {
            HeroViewModel heroViewModel = Mapper.Map<HeroDetailModel, HeroViewModel>(hero.Value);
            heroViewModels.Add(heroViewModel);
        }

        return heroViewModels;
    }

    private static IEnumerable<KeyValuePair<uint, HeroDetailModel>> GetHeroesByPrimaryAttribute(IReadOnlyDictionary<uint, HeroDetailModel> heroes, string attributeKey)
    {
        return heroes.Where(x =>
            x.Value.IsEnabled
            && x.Value.PrimaryAttribute.Key == attributeKey
            && x.Value.NameInSchema != "npc_dota_hero_base");
    }
}
