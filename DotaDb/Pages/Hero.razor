@page "/hero"
@page "/hero/{tab}"
@using DotaDb.Models
@using DotaDb.Data
@using Steam.Models.DOTA2
@using AutoMapper
@inject HeroService HeroService
@inject AppStateService AppStateService
@inject IMapper Mapper

<div class="container py-2">
    <ul class="nav nav-pills">
        <li class="nav-item">
            <NavLink class="nav-link" href="/hero/grid">
                <i class="fas fa-th"></i> Grid
            </NavLink>
        </li>
        <li class="nav-item">
            <NavLink class="nav-link" href="/hero/table">
                <i class="fas fa-table"></i> Table
            </NavLink>
        </li>
    </ul>
    @if (Tab == "grid")
    {
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_str.png" width="28" height="28" />
                Strength
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.StrengthHeroes.Count; i++)
                    {
                        var hero = viewModel.StrengthHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_agi.png" width="28" height="28" />
                Agility
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.AgilityHeroes.Count; i++)
                    {
                        var hero = viewModel.AgilityHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
        <div class="card my-2">
            <h5 class="card-header">
                <img src="/images/icon_int.png" width="28" height="28" />
                Intelligence
            </h5>
            <div class="card-body hero-select-list" style="padding: 0">
                <div class="row" style="margin: 0">
                    @for (int i = 0; i < viewModel.IntelligenceHeroes.Count; i++)
                    {
                        var hero = viewModel.IntelligenceHeroes.ElementAt(i);
                        <HeroGridCell Index="i" Hero="hero" />
                    }
                </div>
            </div>
        </div>
    }
    else if (Tab == "table")
    {
        <div class="card my-2">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <fieldset class="form-group">
                            <legend>Primary</legend>
                            <div class="custom-control custom-checkbox">
                                <input id="showStrength" class="custom-control-input" type="checkbox" @onchange="@(e => OnPrimaryAttributeFilterChanged(e, "strength"))" />
                                <label class="custom-control-label" for="showStrength">
                                    Strength
                                </label>
                            </div>
                            <div class="custom-control custom-checkbox">
                                <input id="showAgility" class="custom-control-input" type="checkbox" @onchange="@(e => OnPrimaryAttributeFilterChanged(e, "agility"))" />
                                <label class="custom-control-label" for="showAgility">
                                    Agility
                                </label>
                            </div>
                            <div class="custom-control custom-checkbox">
                                <input id="showIntelligence" class="custom-control-input" type="checkbox" @onchange="@(e => OnPrimaryAttributeFilterChanged(e, "intelligence"))" />
                                <label class="custom-control-label" for="showIntelligence">
                                    Intelligence
                                </label>
                            </div>
                        </fieldset>
                    </div>
                    <div class="col-md-4">
                        <fieldset class="form-group">
                            <legend>Attack Type</legend>
                            <div class="custom-control custom-checkbox">
                                <input id="showMelee" class="custom-control-input" type="checkbox" @onchange="@(e => OnAttackTypeFilterChanged(e, "melee"))" />
                                <label class="custom-control-label" for="showMelee">
                                    Melee
                                </label>
                            </div>
                            <div class="custom-control custom-checkbox">
                                <input id="showRanged" class="custom-control-input" type="checkbox" @onchange="@(e => OnAttackTypeFilterChanged(e, "ranged"))" />
                                <label class="custom-control-label" for="showRanged">
                                    Ranged
                                </label>
                            </div>
                        </fieldset>
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table table-striped hero-table" data-toggle="table">
                <thead>
                    <tr>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th></th>
                        <th class="d-none d-lg-table-cell" colspan="3">Attack</th>
                    </tr>
                    <tr>
                        <th></th>
                        <th></th>
                        <th data-sortable="true">HP / MP</th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_attack.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_defense.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_str.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_agi.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/icon_int.png" width="24" height="24" />
                        </th>
                        <th data-sortable="true">
                            <img src="/images/overviewicon_speed.png" width="24" height="24" />
                        </th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Range</th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Rate</th>
                        <th class="d-none d-lg-table-cell" data-sortable="true">Type</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var hero in filteredHeroTableList)
                    {
                        <HeroTableRow Hero="hero" />
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private HeroSelectViewModel viewModel = new HeroSelectViewModel();
    private IEnumerable<HeroViewModel> heroTableList = new List<HeroViewModel>();
    private List<HeroViewModel> filteredHeroTableList = new List<HeroViewModel>();
    private HashSet<string> activeFiltersPrimaryAttribute = new HashSet<string>();
    private HashSet<string> activeFiltersAttackType = new HashSet<string>();

    [Parameter]
    public string Tab { get; set; }

    private void OnPrimaryAttributeFilterChanged(ChangeEventArgs e, string source)
    {
        if ((bool)e.Value)
        {
            activeFiltersPrimaryAttribute.Add(source);
        }
        else
        {
            activeFiltersPrimaryAttribute.Remove(source);
        }

        ApplyFilters();
    }

    private void OnAttackTypeFilterChanged(ChangeEventArgs e, string source)
    {
        if ((bool)e.Value)
        {
            activeFiltersAttackType.Add(source);
        }
        else
        {
            activeFiltersAttackType.Remove(source);
        }

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredHeroTableList = new List<HeroViewModel>();

        var groupA = FilterHeroListOnPrimaryAttribute();
        var groupB = FilterHeroListOnAttackType();

        var result = groupA.Intersect(groupB);

        filteredHeroTableList = result
            .OrderBy(x => x.Name)
            .ToList();
    }


    private IEnumerable<HeroViewModel> FilterHeroListOnPrimaryAttribute()
    {
        List<HeroViewModel> group = new List<HeroViewModel>();

        if (!activeFiltersPrimaryAttribute.Any())
        {
            return heroTableList;
        }

        foreach (var filter in activeFiltersPrimaryAttribute)
        {
            if (filter == "strength")
            {
                group.AddRange(heroTableList.Where(x => x.PrimaryAttribute == DotaHeroPrimaryAttributeType.STRENGTH));
            }
            if (filter == "agility")
            {
                group.AddRange(heroTableList.Where(x => x.PrimaryAttribute == DotaHeroPrimaryAttributeType.AGILITY));
            }
            if (filter == "intelligence")
            {
                group.AddRange(heroTableList.Where(x => x.PrimaryAttribute == DotaHeroPrimaryAttributeType.INTELLECT));
            }
        }

        return group;
    }

    private IEnumerable<HeroViewModel> FilterHeroListOnAttackType()
    {
        List<HeroViewModel> group = new List<HeroViewModel>();

        if(!activeFiltersAttackType.Any())
        {
            return heroTableList;
        }

        foreach (var filter in activeFiltersAttackType)
        {
            if (filter == "melee")
            {
                group.AddRange(heroTableList.Where(x => x.AttackType == "Melee"));
            }
            if (filter == "ranged")
            {
                group.AddRange(heroTableList.Where(x => x.AttackType == "Ranged"));
            }
        }

        return group;
    }

    protected override async Task OnInitializedAsync()
    {
        AppStateService.HeaderImageName = "bg8_fade.jpg";
        AppStateService.HeaderText = "Heroes";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var heroes = await HeroService.GetHeroDetailsAsync();

            var str = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.STRENGTH.Key);
            var agi = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.AGILITY.Key);
            var intel = GetHeroesByPrimaryAttribute(heroes, DotaHeroPrimaryAttributeType.INTELLECT.Key);

            // Grid list is separated visually by primary attribute
            viewModel.StrengthHeroes = TranslateToViewModel(str).OrderBy(x => x.Name).ToList().AsReadOnly();
            viewModel.AgilityHeroes = TranslateToViewModel(agi).OrderBy(x => x.Name).ToList().AsReadOnly();
            viewModel.IntelligenceHeroes = TranslateToViewModel(intel).OrderBy(x => x.Name).ToList().AsReadOnly();

            // Hero table list is a merged set ordered by name
            List<HeroViewModel> tempHeroTableList = new List<HeroViewModel>();
            tempHeroTableList.AddRange(viewModel.StrengthHeroes);
            tempHeroTableList.AddRange(viewModel.AgilityHeroes);
            tempHeroTableList.AddRange(viewModel.IntelligenceHeroes);
            this.heroTableList = tempHeroTableList.OrderBy(x => x.Name);
            this.filteredHeroTableList = this.heroTableList.ToList();

            // Default view to grid if URL doesn't indicate it
            if (string.IsNullOrWhiteSpace(Tab) || (Tab != "grid" && Tab != "table"))
            {
                Tab = "grid";
            }

            StateHasChanged();
        }
    }

    private IReadOnlyCollection<HeroViewModel> TranslateToViewModel(IEnumerable<KeyValuePair<uint, HeroDetailModel>> heroes)
        => heroes
            .Select(hero => Mapper.Map<HeroDetailModel, HeroViewModel>(hero.Value))
            .ToList()
            .AsReadOnly();

    private static IEnumerable<KeyValuePair<uint, HeroDetailModel>> GetHeroesByPrimaryAttribute(IReadOnlyDictionary<uint, HeroDetailModel> heroes, string attributeKey)
        => heroes.Where(x =>
            x.Value.IsEnabled
            && x.Value.PrimaryAttribute.Key == attributeKey
            && x.Value.NameInSchema != "npc_dota_hero_base"
            && x.Value.NameInSchema != "npc_dota_hero_target_dummy");
}
