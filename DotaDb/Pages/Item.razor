@page "/items/game"
@using DotaDb.Data
@using DotaDb.Models
@using DotaDb.Utilities
@using AutoMapper
@inject ItemService ItemService
@inject AppStateService AppStateService
@inject IMapper Mapper 
@inject SharedService SharedService 

<div class="container py-2">
    <div class="row mb-2">
        <div class="col-md-2">
            <input id="search" class="form-control form-control-sm" type="text" placeholder="Search (press Enter)"
                   @bind="searchValue"
                   @bind:event="oninput"
                   @onkeyup="OnSearch" />
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnQualityChanged">
                <option selected value=" ">-- Quality --</option>
                <option value="artifact">Artifact</option>
                <option value="common">Common</option>
                <option value="component">Component</option>
                <option value="epic">Epic</option>
                <option value="secret shop">Secret Shop</option>
                <option value="rare">Rare</option>
            </select>
        </div>
        <div class="col-md-2">
            <select class="custom-select custom-select-sm" @onchange="OnBehaviorChanged">
                <option selected value=" ">-- Behavior --</option>
                <option value="area of effect">Area of Effect</option>
                <option value="channelled">Channelled</option>
                <option value="cursor target">Cursor Target</option>
                <option value="directional">Directional</option>
                <option value="disable roots">Disable Roots</option>
                <option value="ignore channel">Ignore Channel</option>
                <option value="immediate">Immediate</option>
                <option value="no target">No Target</option>
                <option value="optional unit target">Optional Unit Target</option>
                <option value="passive">Passive</option>
                <option value="stops attacking">Stops Attacking</option>
                <option value="stops movement">Stops Movement</option>
                <option value="toggle">Toggle</option>
                <option value="unit target">Unit Target</option>
                <option value="suppress associated consumable">Suppress Associated Consumable</option>
            </select>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-hover game-item-table" data-toggle="table">
            <thead>
                <tr>
                    <th></th>
                    <th>ID</th>
                    <th>Cost</th>
                    <th>Quality</th>
                    <th>Behavior</th>
                    <th>Mana Cost</th>
                    <th>Cooldown</th>
                    <th>Stackable</th>
                    <th>Sellable</th>
                    <th>Killable</th>
                    <th>Droppable</th>
                    <th>Neutral Drop</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var gameItem in filteredGameItems)
                {
                    <tr>
                        <td>
                            <div class="text-center py-1">
                                <img src="@gameItem.IconPath" />
                                <br />
                                <small>@(!string.IsNullOrWhiteSpace(gameItem.Name) ? gameItem.Name : "???")</small>
                            </div>
                        </td>
                        <td>@gameItem.Id</td>
                        <td>@gameItem.Cost</td>
                        <td>@(!string.IsNullOrWhiteSpace(gameItem.Quality) ? (MarkupString)gameItem.Quality : iconMinus)</td>
                        <td>@(!string.IsNullOrWhiteSpace(gameItem.Behaviors) ? (MarkupString)gameItem.Behaviors : iconMinus)</td>
                        <td>@(!string.IsNullOrWhiteSpace(gameItem.ManaCost) ? (MarkupString)gameItem.ManaCost : iconMinus)</td>
                        <td>@(!string.IsNullOrWhiteSpace(gameItem.Cooldown) ? (MarkupString)gameItem.Cooldown : iconMinus)</td>
                        <td>@(gameItem.IsStackable.HasValue ? (gameItem.IsStackable.Value ? iconCheck : iconTimes) : iconMinus)</td>
                        <td>@(gameItem.IsSellable.HasValue ? (gameItem.IsSellable.Value ? iconCheck : iconTimes) : iconMinus)</td>
                        <td>@(gameItem.IsKillable.HasValue ? (gameItem.IsKillable.Value ? iconCheck : iconTimes) : iconMinus)</td>
                        <td>@(gameItem.IsDroppable.HasValue ? (gameItem.IsDroppable.Value ? iconCheck : iconTimes) : iconMinus)</td>
                        <td>@(gameItem.IsNeutralDrop.HasValue ? (gameItem.IsNeutralDrop.Value ? iconCheck : iconTimes) : iconMinus)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@*<div class="container py-2">
        <div class="card">
            <div class="card-body">
                <div class="row item-list">
                    @{ int gameItemNumber = 0; }
                    @foreach (var gameItem in gameItems)
                    {
                        <div class="col-md-4">
                            @if (gameItemNumber++ >= 3)
                            {
                                <hr />
                            }
                            <div class="media" style="margin-bottom: 0">
                                <div class="img-thumbnail" style="border: 0" title="@gameItem.Name">
                                    <img src="@gameItem.IconPath" class="mr-2 shadow" />
                                </div>
                                <div class="media-body">
                                    <h4 class="mt-0">
                                        @if (!String.IsNullOrEmpty(gameItem.Name))
                                        {
                                            @gameItem.Name
                                        }
                                        else
                                        {
                                            @:Undefined
                                        }
                                    </h4>
                                    <p class="text-muted">@gameItem.Lore</p>
                                </div>
                            </div>
                            <table class="table table-striped table-sm" style="table-layout: fixed; margin-top: 15px">
                                <tbody class="text-uppercase">
                                    <tr>
                                        <td>Item ID</td>
                                        <td>@gameItem.Id</td>
                                    </tr>
                                    <tr>
                                        <td>Cost</td>
                                        <td>@gameItem.Cost</td>
                                    </tr>
                                    <GameItemAttributeRowIfHasValue Name="Mana Cost" Value="@gameItem.ManaCost" />
                                    <GameItemAttributeRowIfHasValue Name="Duration" Value="@gameItem.Duration" />
                                    <GameItemAttributeRowIfHasValue Name="Damage" Value="@gameItem.Damage" />
                                    <GameItemAttributeRowIfHasValue Name="Cast Point" Value="@gameItem.CastPoint" />
                                    <GameItemAttributeRowIfHasValue Name="Cast Range" Value="@gameItem.CastRange" />
                                    <GameItemAttributeRowIfHasValue Name="Cooldown" Value="@gameItem.Cooldown" />
                                    <GameItemAttributeRowIfHasValue Name="Target Flags" Value="@gameItem.TargetFlags" />
                                    <GameItemAttributeRowIfHasValue Name="Target Types" Value="@gameItem.TargetTypes" />
                                    <GameItemAttributeRowIfHasValue Name="Team Targets" Value="@gameItem.TeamTargets" />
                                    <GameItemAttributeRowIfHasValue Name="Declarations" Value="@gameItem.Declarations" />
                                    <GameItemAttributeRowIfHasValue Name="Disassemble Rules" Value="@gameItem.DisassembleRule" />
                                    <GameItemAttributeRowIfHasValue Name="Shareability" Value="@gameItem.Shareability" />
                                    <GameItemAttributeRowIfHasValue Name="Shop Tags" Value="@gameItem.ShopTags" />
                                    @if (gameItem.InitialCharges.HasValue)
                                    {
                                        <tr>
                                            <td>Initial Charges</td>
                                            <td>@gameItem.InitialCharges.Value</td>
                                        </tr>
                                    }
                                    @if (gameItem.DisplayCharges.HasValue)
                                    {
                                        <tr>
                                            <td>Display Charges</td>
                                            <td>@gameItem.DisplayCharges.Value</td>
                                        </tr>
                                    }
                                    @if (gameItem.StockInitial.HasValue)
                                    {
                                        <tr>
                                            <td>Initial Stock</td>
                                            <td>@gameItem.StockInitial.Value</td>
                                        </tr>
                                    }
                                    @if (gameItem.StockMax.HasValue)
                                    {
                                        <tr>
                                            <td>Max Stock</td>
                                            <td>@gameItem.StockMax.Value</td>
                                        </tr>
                                    }
                                    @if (gameItem.StockTime.HasValue)
                                    {
                                        <tr>
                                            <td>Stock Time</td>
                                            <td>@gameItem.StockTime.Value</td>
                                        </tr>
                                    }
                                    <GameItemBooleanAttributeRowIfHasValue Name="Alertable" Value="@gameItem.IsAlertable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Droppable" Value="@gameItem.IsDroppable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Killable" Value="@gameItem.IsKillable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Permanent" Value="@gameItem.IsPermanent" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Purchasable" Value="@gameItem.IsPurchasable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Sellable" Value="@gameItem.IsSellable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Stackable" Value="@gameItem.IsStackable" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Contributes to Net Worth" Value="@gameItem.ContributesToNetWorthWhenDropped" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Secret Shop" Value="@gameItem.SecretShop" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Side Shop" Value="@gameItem.SideShop" />
                                    <GameItemBooleanAttributeRowIfHasValue Name="Recipe" Value="@gameItem.IsRecipe" />

                                    @foreach (var abilitySpecial in gameItem.Attributes)
                                    {
                                        <tr>
                                            <td>
                                                @if (!String.IsNullOrWhiteSpace(abilitySpecial.Name))
                                                {
                                                    @abilitySpecial.Name
                                                }
                                                else
                                                {
                                                    @String.Format("{0}", abilitySpecial.RawName.Replace("_", " "))
                                                }
                                            </td>
                                            <td>@abilitySpecial.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            @if (!String.IsNullOrWhiteSpace(gameItem.Description))
                            {
                                <div class="alert alert-light">
                                    <small>@gameItem.Description</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>*@

@code {
    private IEnumerable<GameItemViewModel> gameItems = new List<GameItemViewModel>();
    private List<GameItemViewModel> filteredGameItems = new List<GameItemViewModel>();

    private MarkupString iconCheck = (MarkupString)"<i class=\"fas fa-check text-success\" />";
    private MarkupString iconTimes = (MarkupString)"<i class=\"fas fa-times text-danger\" />";
    private MarkupString iconMinus = (MarkupString)"<i class=\"fas fa-minus text-warning\" />";

    private string searchValue;
    private string selectedQuality;
    private string selectedBehavior;

    private void OnSearch(KeyboardEventArgs e)
    {
        // Apply filters if the user has either cleared out search or pressed "Enter"
        if (string.IsNullOrWhiteSpace(searchValue) || e.Key == "Enter")
        {
            ApplyFilters();
        }
    }

    private void OnQualityChanged(ChangeEventArgs e)
    {
        selectedQuality = e.Value.ToString();
        ApplyFilters();
    }

    private void OnBehaviorChanged(ChangeEventArgs e)
    {
        selectedBehavior = e.Value.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredGameItems = new List<GameItemViewModel>();

        var groupA = FilterQuality();
        var groupB = FilterBehavior();

        var result = groupA.Intersect(groupB, new GameItemViewModelEqualityComparer());

        filteredGameItems = result
            .Where(x => !string.IsNullOrWhiteSpace(searchValue) ? x.Name.ToLower().Contains(searchValue.Trim().ToLower()) : true)
            .OrderBy(x => x.Name)
            .ToList();
    }

    private IEnumerable<GameItemViewModel> FilterQuality()
    {
        if (string.IsNullOrWhiteSpace(selectedQuality))
        {
            return gameItems;
        }

        return gameItems.Where(x => !string.IsNullOrWhiteSpace(x.Quality) && x.Quality.ToLower().Contains(selectedQuality));
    }

    private IEnumerable<GameItemViewModel> FilterBehavior()
    {
        if (string.IsNullOrWhiteSpace(selectedBehavior))
        {
            return gameItems;
        }

        return gameItems.Where(x => !string.IsNullOrWhiteSpace(x.Behaviors) && x.Behaviors.ToLower().Contains(selectedBehavior));
    }

    protected override async Task OnInitializedAsync()
    {
        AppStateService.HeaderImageName = "bg6_fade.jpg";
        AppStateService.HeaderText = "In Game Items";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var tempGameItems = await ItemService.GetGameItemsAsync();
            gameItems = Mapper.Map<IReadOnlyCollection<GameItemDetailModel>, IReadOnlyCollection<GameItemViewModel>>(tempGameItems, opts => opts.Items["lookup"] = SharedService.GetCombinedLookups())
                .OrderBy(x => x.Name);
            filteredGameItems = gameItems.ToList();
            StateHasChanged();
        }
    }
}
