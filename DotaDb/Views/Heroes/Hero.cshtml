@model DotaDb.ViewModels.HeroViewModel
@using SourceSchemaParser.Dota2;

<div class="alert alert-info">
    <i class="fa fa-info-circle"></i> The information on this page is built dynamically from Dota 2 files and tooltips.
</div>
<div class="row">
    <div class="col-lg-3">
        <h2 style="margin-top: 0;">
            @Model.Name
        </h2>
        <div class="text-center">
            <img src="@Model.AvatarImagePath" class="shadow" />
        </div>
        <hr />
        <div class="row">
            <div class="col-lg-6">
                <img src="~/Content/icon_str.png" width="40" height="40" />
                <strong>@Model.BaseStrength</strong> <small class="text-muted">(+@Model.StrengthGain.ToString("F"))</small>
            </div>
            <div class="col-lg-6">
                <img src="~/Content/icon_atk.png" height="40" />
                <strong>@Model.BaseDamageMin - @Model.BaseDamageMax</strong>
            </div>
            <div class="col-lg-6">
                <img src="~/Content/icon_agi.png" width="40" height="40" />
                <strong>@Model.BaseAgility</strong> <small class="text-muted">(+@Model.AgilityGain.ToString("F"))</small>
            </div>
            <div class="col-lg-6">
                <img src="~/Content/icon_speed.png" height="40" />
                <strong>@Model.BaseMoveSpeed</strong>
            </div>
            <div class="col-lg-6">
                <img src="~/Content/icon_int.png" width="40" height="40" />
                <strong>@Model.BaseIntelligence</strong> <small class="text-muted">(+@Model.IntelligenceGain.ToString("F"))</small>
            </div>
            <div class="col-lg-6">
                <img src="~/Content/icon_def.png" height="40" />
                <strong>@Model.BaseArmor</strong>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-lg-6">
                <div style="line-height: 5px;">
                    <p class="text-uppercase">
                        <span class="label label-primary">@Model.AttackType</span>
                    </p>
                    @foreach (var role in Model.Roles)
                    {
                        var color = String.Empty;
                        if (role.Level == "1") { color = "label-danger"; }
                        else if (role.Level == "2") { color = "label-warning"; }
                        else if (role.Level == "3") { color = "label-success"; }
                        <p class="text-uppercase">
                            <span class="label @color">@role.Name (@role.Level)</span>
                        </p>
                    }
                </div>
            </div>
            <div class="col-lg-6 text-uppercase">
                @if (Model.PrimaryAttribute != null)
                {
                    <small class="text-muted">Attr:</small>
                    <small><strong>@Model.PrimaryAttribute</strong></small>
                    <br />
                }
                <small class="text-muted">Team:</small>
                <small>@Model.Team</small>
                <br />
                <small class="text-muted">Atk Rate:</small>
                <small>@Model.AttackRate.ToString("F")</small>
                <br />
                <small class="text-muted">Atk Range:</small>
                <small>@Model.AttackRange.ToString("F")</small>
                <br />
                <small class="text-muted">Turn Rate:</small>
                <small>@Model.TurnRate.ToString("F")</small>
            </div>
        </div>
        <hr />
        <div class="panel panel-default">
            <div class="list-group">
                <a class="list-group-item" href="#">
                    <i class="fa fa-info fa-fw"></i>
                    Overview
                </a>
                <a class="list-group-item" href="#">
                    <i class="fa fa-cogs fa-fw"></i>
                    Item Builds
                </a>
                <a class="list-group-item" href="#">
                    <i class="fa fa-play-circle fa-fw"></i>
                    Matches
                </a>
                <a class="list-group-item" href="#">
                    <i class="fa fa-list-alt fa-fw"></i>
                    Raw Schema Data
                </a>
            </div>
        </div>
    </div>
    <div class="col-lg-9">
        <div class="row">
            <div class="panel panel-default">
                <div class="panel-body abilities">
                    @foreach (var ability in Model.Abilities)
                    {
                        <div class="media" style="margin-bottom: 10px">
                            <div class="media-left">
                                <img src="@ability.AvatarImagePath" width="80" height="80" class="shadow" />
                            </div>
                            <div class="media-body">
                                <h4 class="media-heading">
                                    @ability.Name
                                    @if (ability.AbilityType != null)
                                    {
                                        <span class="badge">@ability.AbilityType</span>
                                    }
                                </h4>
                                <p class="text-muted">@ability.Description</p>
                            </div>
                        </div>

                        <div class="row" style="margin-bottom: 10px">
                            <div class="col-lg-4 text-uppercase">
                                @if (!String.IsNullOrEmpty(ability.Behaviors))
                                {
                                    <p>
                                        <small class="text-muted">Behaviors:</small>
                                        <small>@ability.Behaviors</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.TargetTypes))
                                {
                                    <p>
                                        <small class="text-muted">Targets:</small>
                                        <small>@ability.TargetTypes</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.TeamTargets))
                                {
                                    <p>
                                        <small class="text-muted">Team Targets:</small>
                                        <small>@ability.TeamTargets</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.TargetFlags))
                                {
                                    <p>
                                        <small class="text-muted">Target Flags:</small>
                                        <small>@ability.TargetFlags</small>
                                    </p>
                                }
                            </div>
                            <div class="col-lg-4 text-uppercase">
                                @if (!String.IsNullOrEmpty(ability.CastPoint))
                                {
                                    <p>
                                        <small class="text-muted">Cast Point:</small>
                                        <small>@ability.CastPoint</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.CastRange))
                                {
                                    <p>
                                        <small class="text-muted">Cast Range:</small>
                                        <small>@ability.CastRange</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.Cooldown))
                                {
                                    <p>
                                        <small class="text-muted">Cooldown:</small>
                                        <small>@ability.Cooldown</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.Damage))
                                {
                                    <p>
                                        <small class="text-muted">Damage:</small>
                                        <small>@ability.Damage</small>
                                    </p>
                                }
                                @if (ability.DamageType != null)
                                {
                                    <p>
                                        <small class="text-muted">Damage Type:</small>
                                        @if (ability.DamageType.Key == DotaDamageType.PHYSICAL.Key)
                                        {
                                            <small class="text-danger">@ability.DamageType</small>
                                        }
                                        else if (ability.DamageType.Key == DotaDamageType.MAGICAL.Key)
                                        {
                                            <small class="text-primary">@ability.DamageType</small>
                                        }
                                        else if (ability.DamageType.Key == DotaDamageType.PURE.Key)
                                        {
                                            <small class="text-success">@ability.DamageType</small>
                                        }
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.Duration))
                                {
                                    <p>
                                        <small class="text-muted">Duration:</small>
                                        <small>@ability.Duration</small>
                                    </p>
                                }
                                @if (!String.IsNullOrEmpty(ability.ManaCost))
                                {
                                    <p>
                                        <small class="text-muted">Mana Cost:</small>
                                        <small>@ability.ManaCost</small>
                                    </p>
                                }
                                @if (ability.SpellImmunityType != null)
                                {
                                    <p>
                                        <small class="text-muted">Pierces Spell Immunity:</small>
                                        @if (ability.SpellImmunityType.Key == DotaSpellImmunityType.ALLIES_YES.Key || ability.SpellImmunityType.Key == DotaSpellImmunityType.ENEMIES_YES.Key)
                                        {
                                            <small class="text-success">@ability.SpellImmunityType</small>
                                        }
                                        else
                                        {
                                            <small class="text-danger">@ability.SpellImmunityType</small>
                                        }
                                    </p>
                                }
                            </div>
                            <div class="col-lg-4 text-uppercase">
                                @foreach (var abilitySpecial in ability.Attributes)
                                {
                                    <p>
                                        <small class="text-muted">
                                            @if (!String.IsNullOrEmpty(abilitySpecial.Name))
                                            {
                                                @abilitySpecial.Name
                                            }
                                            else
                                            {
                                                @String.Format("{0}:", abilitySpecial.RawName.Replace("_", " "))
                                            }
                                        </small>
                                        <small>@abilitySpecial.Value</small>
                                    </p>
                                }
                            </div>
                        </div>

                        <ul class="list-unstyled" style="margin-bottom: 0">
                            @if (!String.IsNullOrEmpty(ability.Note0))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note0</small>
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(ability.Note1))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note1</small>
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(ability.Note2))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note2</small>
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(ability.Note3))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note3</small>
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(ability.Note4))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note4</small>
                                </li>
                            }
                            @if (!String.IsNullOrEmpty(ability.Note5))
                            {
                                <li>
                                    <small class="text-muted text-uppercase">Note:</small>
                                    <small>@ability.Note5</small>
                                </li>
                            }
                        </ul>
                        <hr />
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="panel panel-default">
                <div class="panel-body">
                    <h3 style="margin-top: 0">Level Progression <small class="text-uppercase">(without stats)</small></h3>
                </div>
                <table class="table table-condensed table-striped text-uppercase text-muted" style="font-size: 12px; margin-bottom: 0">
                    <thead>
                        <tr>
                            <th>Level</th>
                            @for (int i = 1; i <= 25; i++)
                            {
                                <th>@i</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>HP</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@Math.Round(150 + (19 * (Model.BaseStrength + (i * Model.StrengthGain))))</td>
                            }
                        </tr>
                        <tr>
                            <td>MP</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@Math.Round(13 * (Model.BaseIntelligence + (i * Model.IntelligenceGain)))</td>
                            }
                        </tr>
                        <tr>
                            <td>DMG (min)</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.STRENGTH.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMin + (Model.BaseStrength + (i * Model.StrengthGain)))</td>
                                }
                                else if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.INTELLECT.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMin + (Model.BaseIntelligence + (i * Model.IntelligenceGain)))</td>
                                }
                                else if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.AGILITY.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMin + (Model.BaseAgility + (i * Model.AgilityGain)))</td>
                                }
                            }
                        </tr>
                        <tr>
                            <td>DMG (max)</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.STRENGTH.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMax + (Model.BaseStrength + (i * Model.StrengthGain)))</td>
                                }
                                else if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.INTELLECT.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMax + (Model.BaseIntelligence + (i * Model.IntelligenceGain)))</td>
                                }
                                else if (Model.PrimaryAttribute.Key == DotaHeroPrimaryAttributeType.AGILITY.Key)
                                {
                                    <td>@Math.Round(Model.BaseDamageMax + (Model.BaseAgility + (i * Model.AgilityGain)))</td>
                                }
                            }
                        </tr>
                        <tr>
                            <td>Armor</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@Math.Round(Model.BaseArmor + (.14 * (Model.BaseAgility + (i * Model.AgilityGain))))</td>
                            }
                        </tr>
                        <tr>
                            <td>STR</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@(Math.Round(Model.BaseStrength + (i * Model.StrengthGain)))</td>
                            }
                        </tr>
                        <tr>
                            <td>AGI</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@(Math.Round(Model.BaseAgility + (i * Model.AgilityGain)))</td>
                            }
                        </tr>
                        <tr>
                            <td>INT</td>
                            @for (int i = 0; i < 25; i++)
                            {
                                <td>@(Math.Round(Model.BaseIntelligence + (i * Model.IntelligenceGain)))</td>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
