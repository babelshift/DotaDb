@model DotaDb.ViewModels.HeroViewModel

@{
    Layout = "~/Views/Heroes/_HeroLayout.cshtml";
}
<div class="abilities">
    @foreach (var ability in Model.Abilities)
            {
        <div class="media" style="margin-bottom: 10px">
            <div class="media-left">
                <img src="@ability.AvatarImagePath" width="80" height="80" class="shadow" />
            </div>
            <div class="media-body">
                <h4 class="media-heading">
                    @ability.Name
                    @if (ability.AbilityType != null)
                    {
                        <span class="badge">@ability.AbilityType</span>
                    }
                </h4>
                <p class="text-muted">@ability.Description</p>
            </div>
        </div>

                <div class="row" style="margin-bottom: 10px">
                    <div class="col-lg-4 text-uppercase">
                        <p>
                            <small class="text-muted">ID:</small>
                            <small>@ability.Id</small>
                        </p>
                        @if (!String.IsNullOrEmpty(ability.Behaviors))
                {
                            <p>
                                <small class="text-muted">Behaviors:</small>
                                <small>@ability.Behaviors</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.TargetTypes))
                {
                            <p>
                                <small class="text-muted">Targets:</small>
                                <small>@ability.TargetTypes</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.TeamTargets))
                {
                            <p>
                                <small class="text-muted">Team Targets:</small>
                                <small>@ability.TeamTargets</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.TargetFlags))
                {
                            <p>
                                <small class="text-muted">Target Flags:</small>
                                <small>@ability.TargetFlags</small>
                            </p>
                        }
                    </div>
                    <div class="col-lg-4 text-uppercase">
                        @if (!String.IsNullOrEmpty(ability.CastPoint))
                {
                            <p>
                                <small class="text-muted">Cast Point:</small>
                                <small>@ability.CastPoint</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.CastRange))
                {
                            <p>
                                <small class="text-muted">Cast Range:</small>
                                <small>@ability.CastRange</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.Cooldown))
                {
                            <p>
                                <small class="text-muted">Cooldown:</small>
                                <small>@ability.Cooldown</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.Damage))
                {
                            <p>
                                <small class="text-muted">Damage:</small>
                                <small>@ability.Damage</small>
                            </p>
                        }
                        @if (ability.DamageType != null)
                {
                            <p>
                                <small class="text-muted">Damage Type:</small>
                                @if (ability.DamageType.Key == Steam.Models.DOTA2.DotaDamageType.PHYSICAL.Key)
                                {
                                    <small class="text-danger">@ability.DamageType</small>
                                }
                                else if (ability.DamageType.Key == Steam.Models.DOTA2.DotaDamageType.MAGICAL.Key)
                                {
                                    <small class="text-primary">@ability.DamageType</small>
                                }
                                else if (ability.DamageType.Key == Steam.Models.DOTA2.DotaDamageType.PURE.Key)
                                {
                                    <small class="text-success">@ability.DamageType</small>
                                }
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.Duration))
                {
                            <p>
                                <small class="text-muted">Duration:</small>
                                <small>@ability.Duration</small>
                            </p>
                        }
                        @if (!String.IsNullOrEmpty(ability.ManaCost))
                {
                            <p>
                                <small class="text-muted">Mana Cost:</small>
                                <small>@ability.ManaCost</small>
                            </p>
                        }
                        @if (ability.SpellImmunityType != null)
                {
                            <p>
                                <small class="text-muted">Pierces Spell Immunity:</small>
                                @if (ability.SpellImmunityType.Key == Steam.Models.DOTA2.DotaSpellImmunityType.ALLIES_YES.Key || ability.SpellImmunityType.Key == Steam.Models.DOTA2.DotaSpellImmunityType.ENEMIES_YES.Key)
                                {
                                    <small class="text-success">
                                        <i class="fa fa-check"></i>
                                        @ability.SpellImmunityType
                                    </small>
                                }
                                else
                                {
                                    <small class="text-danger">
                                        <i class="fa fa-remove"></i>
                                        @ability.SpellImmunityType
                                    </small>
                                }
                            </p>
                        }
                    </div>
                    <div class="col-lg-4 text-uppercase">
                        @foreach (var abilitySpecial in ability.Attributes)
                        {
                            <p>
                                <small class="text-muted">
                                    @if (!String.IsNullOrEmpty(abilitySpecial.Name))
                                    {
                                        @abilitySpecial.Name
                                    }
                                    else
                                    {
                                        @String.Format("{0}:", abilitySpecial.RawName.Replace("_", " "))
                                    }
                                </small>
                                <small>@abilitySpecial.Value</small>
                            </p>
                        }
                    </div>
                </div>
                <ul class="list-unstyled" style="margin-bottom: 0">
                    @if (!String.IsNullOrEmpty(ability.Note0))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note0</small>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(ability.Note1))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note1</small>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(ability.Note2))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note2</small>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(ability.Note3))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note3</small>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(ability.Note4))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note4</small>
                        </li>
                    }
                    @if (!String.IsNullOrEmpty(ability.Note5))
                    {
                        <li>
                            <small class="text-muted text-uppercase">Note:</small>
                            <small>@ability.Note5</small>
                        </li>
                    }
                </ul>
                <hr />
    }
</div>